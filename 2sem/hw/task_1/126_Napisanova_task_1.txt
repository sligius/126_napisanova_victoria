#честно говоря, я не помню, в каком порядке выявляла ошибки, так как сами тесты тоже меняла местами

DynamicArray|11|size = 1; -> size = 0;|getSize_getSizeOfNewArray_SizeEqualsZero
DynamicArray|15|data = new Object[capacity]; -> data = new Object[size];|setValue_setNewValue_ValueIsRight
DynamicArray|21|if(newSize > 0) -> if(newSize < 0)|resize_SetNewSizeWithPositiveValue_NewSizeIsRight
DynamicArray|26|newSize = size; -> size = newSize;|resize_SetNewSizeWithPositiveValue_NewSizeIsRight
DynamicArray|23|if(newSize != capacity) { -> if(newSize > capacity) {|resize_setNewSizeBiggerThanCapacity_SizeDoesNotChange
DynamicArray|30|(index < 0 || index > size) -> (index < 0 || index >= size)|getIndex_GetIndexEqualsSize_IndexOutOfBounds
DynamicArray|35|(index < 0 || index > size) -> (index < 0 || index >= size)|setIndex_SetIndexEqualsSize_IndexOutOfBounds
DynamicArray|40|(index < 0 || index > size) -> (index < 0 || index >= size)|insertIndex_InsertIndexEqualsSize_IndexOutOfBounds
DynamicArray|42|if(capacity > size) { -> if(capacity == size) {|insertIndex_InsertNewIndexInNotExistingSlot_ValueIsRight
DynamicArray|49|data[size] = value; -> data[index] = value;|insertIndex_InsertNewIndexInNotExistingSlot_ValueIsRight
DynamicArray|52|if(capacity < size) { -> if(capacity == size) {|pushBack_pushBackElement_ValueIsCorrect
DynamicArray|56|data[capacity] = value; -> data[size] = value;|pushBack_pushBackElement_ValueIsCorrect
DynamicArray|60|if(size < 0) -> if(size == 0)|popBack_PopBackElementFromEmptyArray_UnsupportedOperation
DynamicArray|66|if(index < 0 || index > size) -> if(index < 0 || index >= size)|remove_RemoveIndexEqualSize_IndexOutOfBounds

DoubleLinkedList|11|return dummy == dummy; -> return dummy == dummy.getNext();|createList_CreateNewDoubleLinkedList_ListIsNotEmpty
DoubleLinkedList|33|--size; -> ++size;|pushBack_PushElementToNewList_SizeEqualsOne
DoubleLinkedList|17|return dummy.getPrev(); -> return dummy.getNext();|pushFront_PushFrontFewItems_ItemsAreRight
DoubleLinkedList|20|return dummy.getNext(); -> return dummy.getPrev();|pushFront_PushFrontFewItems_ItemsAreRight
DoubleLinkedList|41|return insertBefore(getTail(), data); -> return insertBefore(getHead(), data);|pushFront_PushFrontFewItems_ItemsAreRight
DoubleLinkedList|44|return insertAfter(getHead(), data); -> return insertAfter(getTail(), data);|pushFront_PushFrontFewItems_ItemsAreRight
DoubleLinkedList|24|if(index < 0 || index > size) -> if(index < 0 || index >= size)|get_GetIndexEqualsSize_IndexOutOfBonds
DoubleLinkedList|28|cur = cur.getPrev(); -> cur = cur.getNext();|get_GetIndex_IndexIsRight
DoubleLinkedList|47|node.getPrev().setPrev(node.getNext()); -> node.getPrev().setNext(node.getNext());|remove_RemoveElementFromList_NotEmptyList
DoubleLinkedList|48|node.getNext().setNext(node.getPrev()); -> node.getNext().setPrev(node.getPrev());|remove_RemoveElementFromList_NotEmptyList
DoubleLinkedList|55|list.getHead().setNext(node); -> list.getHead().setPrev(node);|insertListAfter_InsertListAfterFirstList_ElementsAreCorrect
DoubleLinkedList|56|list.getTail().setPrev(node.getNext()); -> list.getTail().setNext(node.getNext());|insertListAfter_InsertListAfterFirstList_ElementsAreCorrect
DoubleLinkedList|63| -> size += list.getSize();|insertListAfter_InsertListAfterFirstList_ElementsAreCorrect
DoubleLinkedList|68|list.getHead().setNext(node.getPrev()); -> list.getHead().setPrev(node.getPrev());|insertListBefore_InsertListBeforeFirstList_ElementsAreCorrect
DoubleLinkedList|69|list.getTail().setPrev(node); -> list.getTail().setNext(node);|insertListBefore_InsertListBeforeFirstList_ElementsAreCorrect
DoubleLinkedList|76| -> size += list.getSize();|insertListBefore_InsertListBeforeFirstList_ElementsAreCorrect

Node|13|this.next = prev; -> this.next = next;|pushFront_PushFrontFewItems_ItemsAreRight
Node|13|this.prev = next; -> this.prev = prev;|pushFront_PushFrontFewItems_ItemsAreRight